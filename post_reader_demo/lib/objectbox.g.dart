// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/models/comment.dart';
import 'data/models/post.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(3, 5456985152650252687),
      name: 'Post',
      lastPropertyId: const IdUid(4, 1297230699186238993),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5595771742369588256),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 2758233705599097731),
            name: 'userId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8806936101127853642),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1297230699186238993),
            name: 'body',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'comments', srcEntity: 'Comment', srcField: 'post')
      ]),
  ModelEntity(
      id: const IdUid(6, 6953907699878551325),
      name: 'Comment',
      lastPropertyId: const IdUid(5, 997875092568043186),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6801765435865938618),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 1447837045491908501),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 476847431795563934),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 943332455551372710),
            name: 'body',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 997875092568043186),
            name: 'postId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 3539896463880157731),
            relationTarget: 'Post')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(6, 6953907699878551325),
      lastIndexId: const IdUid(4, 3539896463880157731),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        5723145587746072518,
        772198180307843669,
        6883984337284559468,
        4033227386906804569
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        1334015032984150267,
        4635294532061093798,
        3293757496977474701,
        77477834869488484,
        857801821245367081,
        3282593531382894774,
        1578006509080687447,
        3726465472600193836,
        4436174140294573244,
        8995498577182581263,
        6489797996520761742,
        4804471008356397120,
        6978530253635461311,
        7272770192560136100,
        6750891436211651120,
        7414298791342699346,
        2511388091888523832,
        720382805766059921,
        3604521083607683738
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Post: EntityDefinition<Post>(
        model: _entities[0],
        toOneRelations: (Post object) => [],
        toManyRelations: (Post object) => {
              RelInfo<Comment>.toOneBacklink(
                      5, object.id, (Comment srcObject) => srcObject.post):
                  object.comments
            },
        getId: (Post object) => object.id,
        setId: (Post object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field Post.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (Post object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final bodyOffset = fbb.writeString(object.body);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.userId);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, bodyOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Post(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              userId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              body: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              comments: ToMany());
          InternalToManyAccess.setRelInfo<Post>(
              object.comments,
              store,
              RelInfo<Comment>.toOneBacklink(
                  5, object.id, (Comment srcObject) => srcObject.post));
          return object;
        }),
    Comment: EntityDefinition<Comment>(
        model: _entities[1],
        toOneRelations: (Comment object) => [object.post],
        toManyRelations: (Comment object) => {},
        getId: (Comment object) => object.id,
        setId: (Comment object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field Comment.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (Comment object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final bodyOffset = fbb.writeString(object.body);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, bodyOffset);
          fbb.addInt64(4, object.post.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Comment(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              body: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              post: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 12, 0)));
          object.post.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Post] entity fields to define ObjectBox queries.
class Post_ {
  /// see [Post.id]
  static final id = QueryIntegerProperty<Post>(_entities[0].properties[0]);

  /// see [Post.userId]
  static final userId = QueryIntegerProperty<Post>(_entities[0].properties[1]);

  /// see [Post.title]
  static final title = QueryStringProperty<Post>(_entities[0].properties[2]);

  /// see [Post.body]
  static final body = QueryStringProperty<Post>(_entities[0].properties[3]);
}

/// [Comment] entity fields to define ObjectBox queries.
class Comment_ {
  /// see [Comment.id]
  static final id = QueryIntegerProperty<Comment>(_entities[1].properties[0]);

  /// see [Comment.name]
  static final name = QueryStringProperty<Comment>(_entities[1].properties[1]);

  /// see [Comment.email]
  static final email = QueryStringProperty<Comment>(_entities[1].properties[2]);

  /// see [Comment.body]
  static final body = QueryStringProperty<Comment>(_entities[1].properties[3]);

  /// see [Comment.post]
  static final post =
      QueryRelationToOne<Comment, Post>(_entities[1].properties[4]);
}
